options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: measure_ac_current
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: AC Current via sound card
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '0.8'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '137'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 524.0]
    rotation: 0
    state: true
- name: analog_noise_source_x_0_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '0.5'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '93'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 684.0]
    rotation: 0
    state: true
- name: asrc1
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Audio input designator
    short_id: ''
    type: str
    value: '"hw:1,0"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 548.0]
    rotation: 0
    state: true
- name: asrc2
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Audio input designator
    short_id: ''
    type: str
    value: '"hw:2,0"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 444.0]
    rotation: 0
    state: true
- name: audio_source_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: asrc1
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 164.0]
    rotation: 0
    state: disabled
- name: audio_source_0_0
  id: audio_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: asrc2
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    ok_to_block: 'True'
    samp_rate: samp_rate
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 284.0]
    rotation: 0
    state: disabled
- name: band_pass_filter_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: '120'
    interp: '1'
    low_cutoff_freq: '30'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_fff
    width: '40'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 36.0]
    rotation: 0
    state: true
- name: band_pass_filter_0_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: '120'
    interp: '1'
    low_cutoff_freq: '30'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_fff
    width: '40'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 244.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/10)
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 220.0]
    rotation: 0
    state: true
- name: blocks_keep_one_in_n_0_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: int(samp_rate/10)
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1168, 364.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: cal
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 60.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_vxx_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: cal
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 332.0]
    rotation: 0
    state: true
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 48.0]
    rotation: 0
    state: true
- name: blocks_multiply_xx_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 224.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 716.0]
    rotation: 0
    state: true
- name: blocks_throttle_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 612.0]
    rotation: 0
    state: true
- name: cal
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Calibration constant
    short_id: ''
    type: eng_float
    value: '206'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 444.0]
    rotation: 0
    state: true
- name: current_logger
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded\
      \ Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ prefix=\"./\",logtime=5.0):  # only default arguments here\n        \"\"\"\
      arguments to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Current Logger',   # will show up in GRC\n\
      \            in_sig=[np.float32]*2,\n            out_sig=None\n        )\n \
      \       # if an attribute with the same name as a parameter is found,\n    \
      \    # a callback is registered (properties work, too).\n        self.prefix\
      \ = prefix\n        self.curs = [0.0]*2\n        self.curcnt = 0\n        self.last\
      \ = time.time()\n        self.logtime = logtime\n\n    def work(self, input_items,\
      \ output_items):\n        \"\"\"Current logger\"\"\"\n        ndx = 0\n    \
      \    self.curcnt += len(input_items[0])\n        for currents in input_items:\n\
      \            self.curs[ndx] += np.sum(currents)\n            ndx += 1\n\n  \
      \      if (time.time() - self.last >= self.logtime):\n            self.curs[0]\
      \ /= self.curcnt\n            self.curs[1] /= self.curcnt\n            self.curcnt\
      \ = 0\n            self.last = time.time()\n            ltp = time.gmtime(self.last)\n\
      \            fp = open (\"%s%02d%02d%02d.csv\" %(self.prefix,ltp.tm_year, ltp.tm_mon,\n\
      \                ltp.tm_mday), \"a\")\n            fp.write(\"%02d,%02d,%02d,%f,%f\\\
      n\" % (ltp.tm_hour,ltp.tm_min,ltp.tm_sec,\n                self.curs[0], self.curs[1]))\n\
      \            fp.close()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    logtime: logtime
    maxoutbuf: '0'
    minoutbuf: '0'
    prefix: prefix
  states:
    _io_cache: ('Current Logger', 'blk', [('prefix', "'./'"), ('logtime', '5.0')],
      [('0', 'float', 1), ('1', 'float', 1)], [], 'Embedded Python Block example -
      a simple multiply const', ['logtime', 'prefix'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1376, 296.0]
    rotation: 0
    state: true
- name: logtime
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Logging time
    short_id: ''
    type: eng_float
    value: '2.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 444.0]
    rotation: 0
    state: true
- name: prefix
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Log file prefix
    short_id: ''
    type: str
    value: '"./mcurrent-"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 444.0]
    rotation: 0
    state: true
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'True'
    gui_hint: ''
    label1: '"Azimuth Motor"'
    label10: ''
    label2: '"Elevation Motor"'
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '2'
    ref_level: '0'
    showports: 'False'
    update_time: '0.5'
    vlen: '3600'
    width1: '2'
    width10: '1'
    width2: '2'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"Time (Seconds)"'
    x_start: '0'
    x_step: '1.0'
    x_units: '""'
    y_axis_label: '"AC Current (AMPS)"'
    y_units: '""'
    ymax: '20'
    ymin: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1624, 260.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/(samp_rate*3.0)
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 60.0]
    rotation: 0
    state: true
- name: single_pole_iir_filter_xx_0_0
  id: single_pole_iir_filter_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1.0/(samp_rate*3.0)
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 284.0]
    rotation: 0
    state: true
- name: stripchart_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"A strip\
      \ chart takes in a stream of floats and produces a 1 hour long\n       strip-chart\
      \ as output\n       \n       Params:\n          decim - how much to decimate\
      \ input to produce 1 SPS\n          seconds - how many seconds long is the stripchart\
      \ vector\n    \"\"\"\n\n    def __init__(self, decim=100,seconds=3600):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n            self,\n\
      \            name='BAA:Strip Chart',   # will show up in GRC\n            in_sig=[np.float32],\n\
      \            out_sig=[(np.float32,seconds)]\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        \n        #\n        # How much do we need\
      \ to average the input to produce a 1SPS\n        #  output?\n        #\n  \
      \      self.decim = decim\n        \n        #\n        # The stripchart vector\
      \ itself--must be persistent in the\n        #  object instance\n        #\n\
      \        self.strip = [0.0]*seconds\n        \n        #\n        # keeps track\
      \ of decimation\n        #\n        self.counter = 0\n        \n        #\n\
      \        # We continuously average the input and store it here\n        #\n\
      \        self.avg = 0.0\n\n    def general_work(self, input_items, output_items):\n\
      \        \"\"\"take an input item(s), place appropriately in stripchart output\"\
      \"\"\n \n        #\n        # Our averager hasn't been initialized with a\n\
      \        #  \"prime the pump\" value?\n        # Do it now.\n        #\n   \
      \     if (self.avg == 0.0):\n            self.avg = input_items[0][0]\n    \
      \        self.counter = 0\n            #\n            # Also init the strip-chart\
      \ to this level\n            #\n            self.strip = [self.avg]*len(self.strip)\n\
      \        #\n        # For each of the input items\n        #\n        for x\
      \ in range(len(input_items[0])):\n            #\n            # Effectively we\
      \ get a N-point moving average\n            # WHere \"N\" is \"decim\"\n   \
      \         #\n            self.avg += input_items[0][x]\n            self.counter\
      \ += 1\n            \n            #\n            # Time to output an item into\
      \ the stripchart\n            #\n            if (self.counter >= self.decim):\n\
      \                \n                #\n                # Reduce by decim\n  \
      \              #\n                self.avg /= self.counter\n               \
      \ \n                #\n                # Use python array notation to effect\
      \ a quick\n                #  shift of items in the stripchart array\n     \
      \           #\n                self.strip = [self.avg] + self.strip[:-1]\n \
      \               self.counter = 0\n                self.avg = 1.0e-15\n     \
      \   #\n        # Stuff output items with the contents of the \n        #  possibly-updated\
      \ stripchart\n        #\n        for y in range(len(output_items[0])):\n   \
      \         output_items[0][y] = self.strip\n        \n        #\n        # Tell\
      \ scheduler we consumed items\n        #\n        self.consume(0, len(input_items[0]))\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: Produces a "stripchart" type vector
    decim: '10'
    maxoutbuf: '0'
    minoutbuf: '0'
    seconds: '3600'
  states:
    _io_cache: ('BAA:Strip Chart', 'blk', [('decim', '100'), ('seconds', '3600')],
      [('0', 'float', 1)], [('0', 'float', 3600)], 'A strip chart takes in a stream
      of floats and produces a 1 hour long\n       strip-chart as output\n       \n       Params:\n          decim
      - how much to decimate input to produce 1 SPS\n          seconds - how many
      seconds long is the stripchart vector\n    ', ['decim'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1448, 76.0]
    rotation: 0
    state: enabled
- name: stripchart_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\n\nclass blk(gr.basic_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"A strip\
      \ chart takes in a stream of floats and produces a 1 hour long\n       strip-chart\
      \ as output\n       \n       Params:\n          decim - how much to decimate\
      \ input to produce 1 SPS\n          seconds - how many seconds long is the stripchart\
      \ vector\n    \"\"\"\n\n    def __init__(self, decim=100,seconds=3600):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n            self,\n\
      \            name='BAA:Strip Chart',   # will show up in GRC\n            in_sig=[np.float32],\n\
      \            out_sig=[(np.float32,seconds)]\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        \n        #\n        # How much do we need\
      \ to average the input to produce a 1SPS\n        #  output?\n        #\n  \
      \      self.decim = decim\n        \n        #\n        # The stripchart vector\
      \ itself--must be persistent in the\n        #  object instance\n        #\n\
      \        self.strip = [0.0]*seconds\n        \n        #\n        # keeps track\
      \ of decimation\n        #\n        self.counter = 0\n        \n        #\n\
      \        # We continuously average the input and store it here\n        #\n\
      \        self.avg = 0.0\n\n    def general_work(self, input_items, output_items):\n\
      \        \"\"\"take an input item(s), place appropriately in stripchart output\"\
      \"\"\n \n        #\n        # Our averager hasn't been initialized with a\n\
      \        #  \"prime the pump\" value?\n        # Do it now.\n        #\n   \
      \     if (self.avg == 0.0):\n            self.avg = input_items[0][0]\n    \
      \        self.counter = 0\n            #\n            # Also init the strip-chart\
      \ to this level\n            #\n            self.strip = [self.avg]*len(self.strip)\n\
      \        #\n        # For each of the input items\n        #\n        for x\
      \ in range(len(input_items[0])):\n            #\n            # Effectively we\
      \ get a N-point moving average\n            # WHere \"N\" is \"decim\"\n   \
      \         #\n            self.avg += input_items[0][x]\n            self.counter\
      \ += 1\n            \n            #\n            # Time to output an item into\
      \ the stripchart\n            #\n            if (self.counter >= self.decim):\n\
      \                \n                #\n                # Reduce by decim\n  \
      \              #\n                self.avg /= self.counter\n               \
      \ \n                #\n                # Use python array notation to effect\
      \ a quick\n                #  shift of items in the stripchart array\n     \
      \           #\n                self.strip = [self.avg] + self.strip[:-1]\n \
      \               self.counter = 0\n                self.avg = 1.0e-15\n     \
      \   #\n        # Stuff output items with the contents of the \n        #  possibly-updated\
      \ stripchart\n        #\n        for y in range(len(output_items[0])):\n   \
      \         output_items[0][y] = self.strip\n        \n        #\n        # Tell\
      \ scheduler we consumed items\n        #\n        self.consume(0, len(input_items[0]))\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: Produces a "stripchart" type vector
    decim: '10'
    maxoutbuf: '0'
    minoutbuf: '0'
    seconds: '3600'
  states:
    _io_cache: ('BAA:Strip Chart', 'blk', [('decim', '100'), ('seconds', '3600')],
      [('0', 'float', 1)], [('0', 'float', 3600)], 'A strip chart takes in a stream
      of floats and produces a 1 hour long\n       strip-chart as output\n       \n       Params:\n          decim
      - how much to decimate input to produce 1 SPS\n          seconds - how many
      seconds long is the stripchart vector\n    ', ['decim'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 468.0]
    rotation: 0
    state: enabled

connections:
- [analog_noise_source_x_0, '0', blocks_throttle_0_0, '0']
- [analog_noise_source_x_0_0, '0', blocks_throttle_0, '0']
- [audio_source_0, '0', band_pass_filter_0, '0']
- [audio_source_0_0, '0', band_pass_filter_0_0, '0']
- [band_pass_filter_0, '0', blocks_multiply_xx_0, '0']
- [band_pass_filter_0, '0', blocks_multiply_xx_0, '1']
- [band_pass_filter_0_0, '0', blocks_multiply_xx_0_0, '0']
- [band_pass_filter_0_0, '0', blocks_multiply_xx_0_0, '1']
- [blocks_keep_one_in_n_0, '0', current_logger, '0']
- [blocks_keep_one_in_n_0, '0', stripchart_0, '0']
- [blocks_keep_one_in_n_0_0, '0', current_logger, '1']
- [blocks_keep_one_in_n_0_0, '0', stripchart_0_0, '0']
- [blocks_multiply_const_vxx_0, '0', single_pole_iir_filter_xx_0, '0']
- [blocks_multiply_const_vxx_0_0, '0', single_pole_iir_filter_xx_0_0, '0']
- [blocks_multiply_xx_0, '0', blocks_multiply_const_vxx_0, '0']
- [blocks_multiply_xx_0_0, '0', blocks_multiply_const_vxx_0_0, '0']
- [blocks_throttle_0, '0', band_pass_filter_0_0, '0']
- [blocks_throttle_0_0, '0', band_pass_filter_0, '0']
- [single_pole_iir_filter_xx_0, '0', blocks_keep_one_in_n_0, '0']
- [single_pole_iir_filter_xx_0_0, '0', blocks_keep_one_in_n_0_0, '0']
- [stripchart_0, '0', qtgui_vector_sink_f_0, '0']
- [stripchart_0_0, '0', qtgui_vector_sink_f_0, '1']

metadata:
  file_format: 1
